const {cmd, commands} = require('../command');
const {fetchJson} = require('../lib/functions');

cmd({
    pattern: "sub",
    desc: "cineru.lk sub download",
    category: "main",
    filename: __filename
},
async (conn, mek, m, {from, quoted, body, isCmd, command, args, q, isGroup, sender, senderNumber, botNumber2, botNumber, pushname, isMe, isOwner, groupMetadata, groupName, participants, groupAdmins, isBotAdmins, isAdmins, reply}) => {
    try {
        // Step 1: Search for movies based on the user query
        const searchUrl = `https://cineru.lk/?s=${encodeURIComponent(q)}`;
        const searchResponse = await fetch(searchUrl);

        if (!searchResponse.ok) {
            return reply("‚ùå ‡∑É‡∑ô‡∑Ä‡∑î‡∂∏‡∑ä ‡∂ö‡∑è‡∂ª‡∑ä‡∂∫‡∂∫ ‡∂Ö‡∑É‡∑è‡∂ª‡∑ä‡∂Æ‡∂ö‡∂∫‡∑í. ‡∂±‡∑ê‡∑Ä‡∂≠ ‡∂ã‡∂≠‡∑ä‡∑É‡∑Ñ‡∑è ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.");
        }

        const searchHtml = await searchResponse.text();
        const results = extractTitles(searchHtml);

        if (results.length === 0) {
            return reply("‚ö†Ô∏è ‡∑É‡∑ô‡∑Ä‡∑î‡∂∏‡∑ä ‡∑É‡∂≥‡∑Ñ‡∑è ‡∂¥‡∑ä‚Äç‡∂ª‡∂≠‡∑í‡∂µ‡∂Ω ‡∂ö‡∑í‡∑É‡∑í‡∑Ä‡∂ö‡∑ä ‡∂±‡∑ú‡∂∏‡∑ê‡∂≠.");
        }

        // Step 2: Display search results
        const numberedList = results.map((item, index) => `${index + 1}. ${sanitizeTitle(item.title)}`).join("\n");
        await reply(`üé¨ ‡∑É‡∑ô‡∑Ä‡∑î‡∂∏‡∑ä ‡∂¥‡∑ä‚Äç‡∂ª‡∂≠‡∑í‡∂µ‡∂Ω:\n\n${numberedList}\n\n‡∂ã‡∂¥‡∑É‡∑í‡∂ª‡∑î‡∑É‡∑í ‡∂Ω‡∂∂‡∑è‡∂ú‡∑ê‡∂±‡∑ì‡∂∏ ‡∑É‡∂≥‡∑Ñ‡∑è ‡∂†‡∑í‡∂≠‡∑ä‚Äç‡∂ª‡∂¥‡∂ß ‡∂Ö‡∂Ç‡∂ö‡∂∫ ‡∂Ω‡∂∂‡∑è‡∂Ø‡∑ô‡∂±‡∑ä‡∂±`);

        // Step 3: Handle user selection
        const movieIndex = parseInt(args[0], 10) - 1;
        if (results[movieIndex]) {
            const movie = results[movieIndex];
            const result = await getPosterImageUrl(movie.url);

            if (!result) {
                return reply("‚ùå ‡∂¥‡∑ú‡∑É‡∑ä‡∂ß‡∂ª‡∑ä ‡∂ë‡∂ö ‡∑Ñ‡∂∏‡∑î‡∂±‡∑ú‡∑Ä‡∑ì‡∂∫, ‡∂ã‡∂Ø‡∑Ä‡∑ä ‡∑É‡∂≥‡∑Ñ‡∑è /help ‡∂∂‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∂ª‡∂±‡∑ä‡∂±");
            }

            const movieName = await getMovieName(movie.url);
            const responseText = `üåª ${movieName} üåº \n\n üéâ‡∂∏‡∑ô‡∂∏ ‡∂Ω‡∂∂‡∑è ‡∂Ø‡∑ì ‡∂á‡∂≠‡∑í ‡∂ã‡∂¥‡∑É‡∑í‡∂ª‡∑ê‡∑É‡∑í‡∂∫ ${result.descriptionText} ‡∂¥‡∑í‡∂ß‡∂¥‡∂≠‡∑ä ‡∑É‡∂≥‡∑Ñ‡∑è ‡∂ú‡∑ê‡∂Ω‡∂¥‡∑ö \n\n  ‡∂ã‡∂¥‡∑É‡∑í‡∂ª‡∑É‡∑í ‡∂¥‡∑í‡∂ß‡∂¥‡∂≠ cineru.lk ‡∑Ä‡∑ô‡∂∂‡∑ä ‡∂Ö‡∂©‡∑Ä‡∑í‡∂∫ ‡∂∏‡∂ú‡∑í‡∂±‡∑ä ‡∂Ω‡∂∂‡∑è ‡∂Ø‡∑ì ‡∂á‡∂≠.üíï \n\n\n ùêÇùê¢ùêßùêûùêåùêöùê≠ùêû ùêÅùê®ùê≠ - ùüêùüéùüêùüí`;

            const downloadLink = await getDownloadLink(movie.url);
            if (downloadLink) {
                await reply(responseText);
                // Send the download link as a document
                await conn.sendMessage(from, {document: {url: downloadLink}, fileName: `${movieName} - sub.zip`}, {quoted: mek});
            } else {
                await reply("‚ùå ‡∂∂‡∑è‡∂ú‡∂≠ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ö ‡∂Ω‡∑í‡∂±‡∑ä‡∂ö‡∑ä ‡∂ë‡∂ö ‡∑Ñ‡∂∏‡∑î ‡∂±‡∑ú‡∑Ä‡∑ì‡∂∫, ‡∂ã‡∂Ø‡∑Ä‡∑ä ‡∑É‡∂≥‡∑Ñ‡∑è /help ‡∂∂‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∂ª‡∂±‡∑ä‡∂±");
            }
        } else {
            return reply("‚ùå ‡∂î‡∂∂ ‡∂Ω‡∂∂‡∑è‡∂Ø‡∑î‡∂±‡∑ä ‡∂Ö‡∂Ç‡∂ö‡∂∫ ‡∑Ä‡∑ê‡∂ª‡∂Ø‡∑ì, ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂±‡∑ê‡∑Ä‡∂≠ ‡∂ã‡∂≠‡∑ä‡∑É‡∑Ñ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±");
        }
    } catch (e) {
        console.log(e);
        return reply(`‚ùå ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∑É‡∑í‡∂Ø‡∑î‡∑Ä‡∑ñ‡∂∫‡∑ö: ${e}`);
    }
});

// Helper functions to extract titles, poster image, download link, and movie name
function extractTitles(html) {
    const regex = /<h2 class="post-box-title">\s*<a href="([^"]+)"[^>]*>(.*?)<\/a>/g;
    const matches = [...html.matchAll(regex)];
    return matches.map((match) => ({
        url: match[1],
        title: match[2].replace(/Subtitles.*/, "Subtitles").trim(),
    }));
}

function sanitizeTitle(title) {
    return title.replace(/[^A-Za-z0-9\s]/g, "").trim();
}

async function getPosterImageUrl(pageUrl) {
    try {
        const response = await fetch(pageUrl);
        const text = await response.text();

        const regexImage = /<img[^>]+class="attachment-slider size-slider wp-post-image"[^>]+src="(https:\/\/[^"]+)"/;
        const regexDescriptionText = /<div[^>]+class="neon"[^>]*>(.*?)<\/div>/;

        const matchImage = text.match(regexImage);
        const matchDescriptionText = text.match(regexDescriptionText);

        if (matchImage && matchImage[1]) {
            const posterUrl = matchImage[1];
            const descriptionText = matchDescriptionText ? matchDescriptionText[1] : "Description Not Found";
            return { posterUrl, descriptionText };
        } else {
            return null;
        }
    } catch (error) {
        console.error("Error fetching poster image:", error);
        return null;
    }
}

async function getDownloadLink(pageUrl) {
    try {
        const response = await fetch(pageUrl);
        const text = await response.text();

        const regexDownloadLink = /<a[^>]+id="btn-download"[^>]+data-link="([^"]+)"/;

        const match = text.match(regexDownloadLink);

        if (match && match[1]) {
            return match[1];
        } else {
            return null;
        }
    } catch (error) {
        console.error("Error fetching download link:", error);
        return null;
    }
}

async function getMovieName(pageUrl) {
    try {
        const response = await fetch(pageUrl);
        const text = await response.text();

        const regexMovieName = /<h1 class="name post-title entry-title"><span itemprop="name">([^<]+)<\/span><\/h1>/;

        const match = text.match(regexMovieName);

        if (match && match[1]) {
            let movieName = match[1].trim();
            const subtitleIndex = movieName.indexOf("Sinhala Subtitles");
            if (subtitleIndex !== -1) {
                movieName = movieName.substring(0, subtitleIndex + "Sinhala Subtitles".length);
            }
            return movieName;
        } else {
            return "Unknown Movie";
        }
    } catch (error) {
        console.error("Error fetching movie name:", error);
        return "Unknown Movie";
    }
}
